{"version":3,"sources":["components/Navigation/styles.module.scss","components/LoadingSpinner/styles.module.scss","components/Initialize/styles.module.scss","components/Footer/styles.module.scss","serviceWorkerRegistration.ts","reportWebVitals.ts","components/Navigation/index.tsx","components/LoadingSpinner/index.tsx","components/Initialize/index.tsx","components/Footer/index.tsx","index.tsx"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","NAV_ITEMS","Overview","Blotter","Navigation","useLocation","className","styles","nav","options","Object","entries","map","text","path","option","pathname","selected","to","LoadingSpinner","isLoading","useState","loading","setLoading","fading","setFading","useEffect","setTimeout","spinner","Initialize","initialize","Footer","buildYear","currentYear","Date","getFullYear","range","footer","ReactDOM","render","StrictMode","exact","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d447fd31.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"styles_nav__2l1LX\",\"options\":\"styles_options__AicWe\",\"option\":\"styles_option__xOpui\",\"selected\":\"styles_selected__3S5Lp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"styles_spinner__3kNkA\",\"fading\":\"styles_fading__2qo3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"initialize\":\"styles_initialize__2Bevm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"styles_footer__2jx7K\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport styles from \"./styles.module.scss\";\n\nconst NAV_ITEMS = {\n    Overview: \"/overview\",\n    Blotter: \"/blotter\"\n};\n\nconst Navigation = () => {\n    const location = useLocation();\n\n    return (\n        <nav className={ styles.nav }>\n            <ul className={ styles.options }>\n                { Object.entries(NAV_ITEMS).map(([text, path]) => {\n                    const className = `${ styles.option }${ location.pathname === path ? ` ${ styles.selected }` : \"\" }`;\n\n                    return <Link className={ className } to={ path }><li>{ text }</li></Link>;\n                }) }\n            </ul>\n        </nav>\n    );\n};\n\nexport default Navigation;","import React, { useEffect, useState } from 'react';\nimport styles from \"./styles.module.scss\";\n\nconst LoadingSpinner = ({ isLoading = false }) => {\n  const [ loading, setLoading ] = useState(isLoading);\n  const [ fading, setFading ] = useState(false);\n\n  useEffect(() => {\n    if (loading && !isLoading) {\n      setFading(true);\n      setTimeout(() => {\n        setLoading(false);\n        setFading(false);\n      }, 500);\n    }\n  }, [loading, isLoading, setLoading, setFading]);\n\n  if (!loading) {\n    return null;\n  }\n\n  const className = `${ styles.spinner }${ fading ? ` ${ styles.fading }` : \"\" }`;\n\n\n  return <div className={ className }><div></div><div></div><div></div><div></div></div>;\n}\n\nexport default LoadingSpinner;\n","import React, { useEffect, useState } from \"react\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport styles from \"./styles.module.scss\";\n\nconst Initialize = () => {\n    const [ loading, setLoading ] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setLoading(false);\n        }, 2000);\n    }, []);\n\n    return (\n        <main className={ styles.initialize }>\n            <LoadingSpinner isLoading={ loading } />\n        </main>\n    );\n};\n\nexport default Initialize;","import React from \"react\";\nimport styles from \"./styles.module.scss\";\n\nconst Footer = () => {\n    const buildYear = 2021;\n    const currentYear = new Date().getFullYear();\n\n    const range = buildYear === currentYear\n        ? `${ buildYear }`\n        : `${ buildYear } - ${ currentYear }`\n\n    return <footer className={ styles.footer }>© { range } Spencer Carver</footer>;\n};\n\nexport default Footer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport Navigation from './components/Navigation';\nimport Initialize from \"./components/Initialize\";\nimport Footer from \"./components/Footer\";\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <>\n                <Navigation />\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Initialize />\n                    </Route>\n                    <Route path=\"/overview\">\n                    </Route>\n                    <Route path=\"/blotter\">\n                    </Route>\n                </Switch>\n                <Footer />\n            </>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}